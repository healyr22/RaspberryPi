/// <reference types="jest" />
declare type FunctionPropertyNames<T> = {
    [K in keyof T]: T[K] extends (...args: any[]) => any ? K : never;
}[keyof T];
declare type ArgsType<T> = T extends (...args: infer A) => any ? A : never;
/**
 * Helper function for manually creating new spy mocks of functions not supported by this module.
 *
 * @param target Object containing the function that will be mocked.
 * @param property Name of the function that will be mocked.
 * @param impl Mock implementation of the target's function. The return type must match the target function's.
 */
export declare function spyOnImplementing<T extends object, M extends FunctionPropertyNames<T>, F extends T[M], I extends (...args: any[]) => ReturnType<F>>(target: T, property: M, impl: I): jest.SpyInstance<ReturnType<F>, ArgsType<F>>;
/**
 * Helper function to create a mock of the Node.js method
 * `process.exit(code: number)`.
 *
 * @param {Object} err Optional error to raise. If unspecified or falsy, calling `process.exit` will resume code
 * execution instead of raising an error.
 */
export declare const mockProcessExit: (err?: any) => jest.SpyInstance<never, [number?]>;
/**
 * Helper function to create a mock of the Node.js method
 * `process.stdout.write(text: string, callback?: function): boolean`.
 */
export declare const mockProcessStdout: () => jest.SpyInstance<boolean, [string, string?, Function?]>;
/**
 * Helper function to create a mock of the Node.js method
 * `process.stderr.write(text: string, callback?: function): boolean`.
 */
export declare const mockProcessStderr: () => jest.SpyInstance<boolean, [string, string?, Function?]>;
/**
 * Helper function to create a mock of the Node.js method
 * `console.log(message: any)`.
 */
export declare const mockConsoleLog: () => jest.SpyInstance<void, [any?, ...any[]]>;
export interface MockedRunResult {
    error?: any;
    result?: any;
    [_: string]: jest.SpyInstance;
}
/**
 * Helper function to run a synchronous function with provided mocks in place, as a virtual environment.
 *
 * Every provided mock will be automatically restored when this function returns.
 */
export declare const mockedRun: (callers: {
    [_: string]: () => jest.SpyInstance<any, any>;
}) => (f: () => any) => MockedRunResult;
/**
 * Helper function to run an asynchronous function with provided mocks in place, as a virtual environment.
 *
 * Every provided mock will be automatically restored when this function returns.
 */
export declare const asyncMockedRun: (callers: {
    [_: string]: () => jest.SpyInstance<any, any>;
}) => (f: () => Promise<any>) => Promise<MockedRunResult>;
export {};
